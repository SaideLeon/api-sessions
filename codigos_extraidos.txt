ARQUIVOS JAVASCRIPT
================================================================================
Diret√≥rio base: ./src
================================================================================

================================================================================
Arquivo: ./src/server.js
================================================================================

// src/server.js
import 'express-async-errors';
import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import helmet from 'helmet';
import compression from 'compression';
import { config } from 'dotenv';
import { PrismaClient } from '@prisma/client';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Rotas
import userRoutes from './routes/userRoutes.js';
import sessionRoutes from './routes/sessionRoutes.js';
import messageRoutes from './routes/messageRoutes.js';
import vendorRoutes from './routes/vendorRoutes.js';
import sellerRoutes from './routes/sellerRoutes.js';

// Middlewares
import { errorHandler, notFound, handleUncaughtExceptions } from './middlewares/error.js';
import { limiter } from './middlewares/rateLimit.js';

// Configura√ß√µes
config(); // Carrega vari√°veis de ambiente
const prisma = new PrismaClient();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Tratamento de exce√ß√µes n√£o capturadas
handleUncaughtExceptions();

class App {
  constructor() {
    this.app = express();
    this.isDevelopment = process.env.NODE_ENV === 'development';

    this.middlewares();
    this.routes();
    this.errorHandling();
    this.database();
  }

  middlewares() {
    // Configura√ß√£o para proxies (necess√°ria para express-rate-limit)
    this.app.set('trust proxy', 1);

    // Seguran√ßa
    this.app.use(helmet()); // Seguran√ßa com headers HTTP
    this.app.use(cors({
      origin: process.env.CORS_ORIGIN || '*',
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));
    this.app.use(limiter); // Rate limiting

    // Body parsing
    this.app.use(express.json({ limit: '10kb' })); // Limita tamanho do body
    this.app.use(express.urlencoded({ extended: true, limit: '10kb' }));

    // Compress√£o de resposta
    this.app.use(compression());

    // Logging
    if (this.isDevelopment) {
      this.app.use(morgan('dev'));
    } else {
      this.app.use(morgan('combined'));
    }

    // Servir arquivos est√°ticos (se necess√°rio)
    this.app.use('/public', express.static(join(__dirname, '../public')));

    // Timestamp da requisi√ß√£o
    this.app.use((req, res, next) => {
      req.requestTime = new Date().toISOString();
      next();
    });
  }

  routes() {
    // Health check
    this.app.get('/api/v1/health', (req, res) => {
      res.status(200).json({
        status: 'success',
        message: 'Server is running',
        timestamp: req.requestTime,
        environment: process.env.NODE_ENV
      });
    });

    // API routes
    this.app.use('/api/v1/users', userRoutes);
    this.app.use('/api/v1/sessions', sessionRoutes);
    this.app.use('/api/v1/messages', messageRoutes);
    this.app.use('/api/v1/vendors', vendorRoutes);
    this.app.use('/api/v1/sellers', sellerRoutes);

    // Handle undefined routes
    this.app.use(notFound);
  }

  errorHandling() {
    // Middleware global de tratamento de erros
    this.app.use(errorHandler);
  }

  async database() {
    try {
      await prisma.$connect();
      console.log('üì¶ Database connected successfully');
    } catch (error) {
      console.error('‚ùå Database connection error:', error);
      process.exit(1);
    }
  }

  getApp() {
    return this.app;
  }
}

// Inst√¢ncia do servidor
const app = new App().getApp();

// Inicializa√ß√£o do servidor
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`
üöÄ Server running in ${process.env.NODE_ENV} mode on port ${PORT}
‚≠êÔ∏è API URL: http://localhost:${PORT}/api/v1
üìù API Docs: http://localhost:${PORT}/api-docs
  `);
});

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (err) => {
  console.error('UNHANDLED REJECTION! üí• Shutting down...');
  console.error(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üëã SIGTERM RECEIVED. Shutting down gracefully');
  server.close(async () => {
    await prisma.$disconnect();
    console.log('üí• Process terminated!');
    process.exit(0);
  });
});

export default app;


================================================================================
Arquivo: ./src/config/database.js
================================================================================



================================================================================
Arquivo: ./src/config/env.js
================================================================================

// src/config/env.js
import { config } from 'dotenv';

config();

export default {
  // App
  PORT: process.env.PORT || 3000,
  NODE_ENV: process.env.NODE_ENV || 'development',
  API_VERSION: process.env.API_VERSION || 'v1',
  
  // Database
  DATABASE_URL: process.env.DATABASE_URL,
  
  // JWT
  JWT_SECRET: process.env.JWT_SECRET,
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '24h',
  
  // Cors
  CORS_ORIGIN: process.env.CORS_ORIGIN || '*',
  
  // Rate Limiting
  RATE_LIMIT_WINDOW: process.env.RATE_LIMIT_WINDOW || 15 * 60 * 1000, // 15 minutes
  RATE_LIMIT_MAX: process.env.RATE_LIMIT_MAX || 100,
  
  // Security
  BCRYPT_ROUNDS: process.env.BCRYPT_ROUNDS || 10,
  
  // Logging
  LOG_LEVEL: process.env.LOG_LEVEL || 'debug',
  
  // Cache
  CACHE_TTL: process.env.CACHE_TTL || 60 * 60, // 1 hour
};

================================================================================
Arquivo: ./src/controllers/userController.js
================================================================================

// src/controllers/userController.js
import { UserService } from '../services/userService.js';

import { AppError } from '../utils/AppError.js';

export class UserController {
  constructor() {
  this.userService = new UserService();
}

  /**
   * Cria um novo usu√°rio.
   */async create(req, res, next) {
        try {
          console.log('UserService instance:', this.userService); // Verifique se √© undefined
          console.log('Creating user with data:', req.body);
          const user = await this.userService.create(req.body);
          return res.status(201).json({
            status: 'success',
            message: 'User created successfully',
            data: user,
          });
        } catch (err) {
          console.error('Error in UserController.create:', err.message);
          next(err);
        }
}

  

  /**
   * Busca todos os usu√°rios.
   */
  async find(req, res, next) {
    try {
      console.log('Fetching all users...');
      const users = await this.userService.findAll();
      return res.status(200).json({
        status: 'success',
        data: users
      });
    } catch (err) {
      console.error('Error in UserController.find:', err.message);
      next(err);
    }
  }

  /**
   * Busca um usu√°rio por ID.
   */
  async findOne(req, res, next) {
    try {
      const { id } = req.params;
      console.log(`Fetching user with ID: ${id}`);
      const user = await this.userService.findById(id);
      return res.status(200).json({
        status: 'success',
        data: user
      });
    } catch (err) {
      console.error('Error in UserController.findOne:', err.message);
      next(err);
    }
  }

  /**
   * Atualiza um usu√°rio.
   */
  async update(req, res, next) {
    try {
      const { id } = req.params;
      console.log(`Updating user with ID: ${id}`, req.body);
      const updatedUser = await this.userService.update(id, req.body);
      return res.status(200).json({
        status: 'success',
        message: 'User updated successfully',
        data: updatedUser
      });
    } catch (err) {
      console.error('Error in UserController.update:', err.message);
      next(err);
    }
  }

  /**
   * Exclui um usu√°rio.
   */
  async delete(req, res, next) {
    try {
      const { id } = req.params;
      console.log(`Deleting user with ID: ${id}`);
      await this.userService.delete(id);
      return res.status(204).send();
    } catch (err) {
      console.error('Error in UserController.delete:', err.message);
      next(err);
    }
  }
}


================================================================================
Arquivo: ./src/controllers/sessionController.js
================================================================================

// src/controllers/sessionController.js
import { SessionService } from '../services/sessionService.js';

export class SessionController {
  constructor() {
    this.sessionService = new SessionService();
  }

  async create(req, res) {
    const { userId } = req.body;
    const session = await this.sessionService.create(userId);
    return res.status(201).json(session);
  }

  async find(req, res) {
    const sessions = await this.sessionService.findAll();
    return res.json(sessions);
  }

  async findByUser(req, res) {
    const { userId } = req.params;
    const sessions = await this.sessionService.findByUser(userId);
    return res.json(sessions);
  }

  async delete(req, res) {
    const { id } = req.params;
    await this.sessionService.delete(id);
    return res.status(204).send();
  }
}

================================================================================
Arquivo: ./src/controllers/messageController.js
================================================================================

// src/controllers/messageController.js
import { MessageService } from '../services/messageService.js';

export class MessageController {
  constructor() {
    this.messageService = new MessageService();
  }

  async create(req, res) {
    const messageData = req.body;
    const message = await this.messageService.create(messageData);
    return res.status(201).json(message);
  }

  async findBySession(req, res) {
    const { sessionId } = req.params;
    const messages = await this.messageService.findBySession(sessionId);
    return res.json(messages);
  }

  async update(req, res) {
    const { id } = req.params;
    const messageData = req.body;
    const message = await this.messageService.update(id, messageData);
    return res.json(message);
  }

  async delete(req, res) {
    const { id } = req.params;
    await this.messageService.delete(id);
    return res.status(204).send();
  }
}

================================================================================
Arquivo: ./src/controllers/vendorController.js
================================================================================

// src/controllers/vendorController.js
import { VendorService } from '../services/vendorService.js';

export class VendorController {
  constructor() {
    this.vendorService = new VendorService();
  }

  async create(req, res) {
    const vendorData = req.body;
    const vendor = await this.vendorService.create(vendorData);
    return res.status(201).json(vendor);
  }

  async findAll(req, res) {
    const vendors = await this.vendorService.findAll();
    return res.json(vendors);
  }

  async findOne(req, res) {
    const { id } = req.params;
    const vendor = await this.vendorService.findById(id);
    return res.json(vendor);
  }

  async update(req, res) {
    const { id } = req.params;
    const vendorData = req.body;
    const vendor = await this.vendorService.update(id, vendorData);
    return res.json(vendor);
  }

  async delete(req, res) {
    const { id } = req.params;
    await this.vendorService.delete(id);
    return res.status(204).send();
  }
}

================================================================================
Arquivo: ./src/controllers/sellerController.js
================================================================================

// src/controllers/sellerController.js
import { SellerService } from '../services/sellerService.js';

export class SellerController {
  constructor() {
    this.sellerService = new SellerService();
  }

  async create(req, res) {
    const sellerData = req.body;
    const seller = await this.sellerService.create(sellerData);
    return res.status(201).json(seller);
  }

  async findAll(req, res) {
    const { sessionId } = req.query;
    const sellers = await this.sellerService.findAll(sessionId);
    return res.json(sellers);
  }

  async findOne(req, res) {
    const { id } = req.params;
    const seller = await this.sellerService.findById(id);
    return res.json(seller);
  }

  async update(req, res) {
    const { id } = req.params;
    const sellerData = req.body;
    const seller = await this.sellerService.update(id, sellerData);
    return res.json(seller);
  }

  async delete(req, res) {
    const { id } = req.params;
    await this.sellerService.delete(id);
    return res.status(204).send();
  }
}

================================================================================
Arquivo: ./src/middlewares/auth.js
================================================================================

// src/middlewares/auth.js
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';
import { AppError } from '../utils/AppError.js';

const prisma = new PrismaClient();

export const authenticate = async (req, res, next) => {
  try {
    // 1. Pegar o token
    let token;
    if (req.headers.authorization?.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }

    if (!token) {
      throw new AppError('Not authenticated. Please log in.', 401);
    }

    // 2. Verificar o token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // 3. Verificar se o usu√°rio ainda existe
    const user = await prisma.user.findUnique({
      where: { id: decoded.id },
      select: {
        id: true,
        email: true,
        username: true,
        phoneNumber: true
      }
    });

    if (!user) {
      throw new AppError('User no longer exists.', 401);
    }

    // 4. Colocar o usu√°rio na request
    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      throw new AppError('Invalid token. Please log in again.', 401);
    }
    if (error.name === 'TokenExpiredError') {
      throw new AppError('Your token has expired. Please log in again.', 401);
    }
    throw error;
  }
};

export const restrictTo = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      throw new AppError('You do not have permission to perform this action', 403);
    }
    next();
  };
};

================================================================================
Arquivo: ./src/middlewares/error.js
================================================================================

// src/middlewares/error.js
import { AppError } from '../utils/AppError.js';

export const errorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  if (process.env.NODE_ENV === 'development') {
    return res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack
    });
  }

  // Erro operacional, erro confi√°vel: enviar mensagem para o cliente
  if (err.isOperational) {
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });
  }

  // Erro de programa√ß√£o ou outro erro n√£o confi√°vel: n√£o vazar detalhes do erro
  console.error('ERROR üí•', err);
  return res.status(500).json({
    status: 'error',
    message: 'Something went wrong!'
  });
};

// Middleware para lidar com erros ass√≠ncronos
export const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

// Middleware para rotas n√£o encontradas
export const notFound = (req, res, next) => {
  const err = new AppError(`Can't find ${req.originalUrl} on this server!`, 404);
  next(err);
};

// Handler para erros n√£o tratados (rejei√ß√µes n√£o tratadas de promessas)
export const handleUncaughtExceptions = () => {
  process.on('uncaughtException', (err) => {
    console.error('UNCAUGHT EXCEPTION! üí• Shutting down...');
    console.error(err.name, err.message);
    process.exit(1);
  });

  process.on('unhandledRejection', (err) => {
    console.error('UNHANDLED REJECTION! üí• Shutting down...');
    console.error(err.name, err.message);
    process.exit(1);
  });
};

================================================================================
Arquivo: ./src/middlewares/validate.js
================================================================================

// src/middlewares/validate.js
import { object, string } from 'yup';
import { AppError } from '../utils/AppError.js';

export const validate = (schema) => async (req, res, next) => {
  try {
    await schema.validate({
      body: req.body,
      query: req.query,
      params: req.params,
    });
    next();
  } catch (err) {
    throw new AppError(err.message, 400);
  }
};

// Schemas de valida√ß√£o
export const schemas = {
  user: {
    create: object({
      body: object({
        username: string().required().min(3),
        email: string().email().required(),
        password: string().required().min(6),
        phoneNumber: string().required().min(10)
      })
    }),
    update: object({
      body: object({
        username: string().min(3),
        email: string().email(),
        phoneNumber: string().min(10)
      })
    })
  },
  session: {
    create: object({
      body: object({
        userId: string().required()
      })
    })
  },
  message: {
    create: object({
      body: object({
        sessionId: string().required(),
        sender: string().required(),
        content: string().required(),
        phoneNumber: string().required(),
        mediaUrl: string().url().nullable()
      })
    })
  },
  vendor: {
    create: object({
      body: object({
        sessionId: string().required(),
        phoneNumber: string().required(),
        vendorName: string().required()
      })
    })
  },
  seller: {
    create: object({
      body: object({
        sessionId: string().required(),
        sellerName: string().required(),
        product: string().required(),
        description: string().required(),
        benefits: string().required(),
        image: string().url().nullable()
      })
    })
  }
};

================================================================================
Arquivo: ./src/middlewares/rateLimit.js
================================================================================

// src/middlewares/rateLimit.js
import rateLimit from 'express-rate-limit';
import { AppError } from '../utils/AppError.js';

export const limiter = rateLimit({
  max: 100, // limite de 100 requisi√ß√µes
  windowMs: 60 * 60 * 1000, // 1 hora
  message: 'Too many requests from this IP, please try again in an hour!',
  handler: (req, res) => {
    throw new AppError('Too many requests from this IP, please try again in an hour!', 429);
  }
});

export const authLimiter = rateLimit({
  max: 5, // limite de 5 tentativas
  windowMs: 15 * 60 * 1000, // 15 minutos
  message: 'Too many login attempts from this IP, please try again in 15 minutes!',
  handler: (req, res) => {
    throw new AppError('Too many login attempts from this IP, please try again in 15 minutes!', 429);
  }
});

================================================================================
Arquivo: ./src/routes/userRoutes.js
================================================================================

// src/routes/userRoutes.js
import { Router } from 'express';
import { UserController } from '../controllers/userController.js';
import { authenticate } from '../middlewares/auth.js';
import { validate, schemas } from '../middlewares/validate.js';
import { authLimiter } from '../middlewares/rateLimit.js';

const router = Router();
const userController = new UserController();

router
  .route('/')
  .post(authLimiter, validate(schemas.user.create), userController.create)
  .get(authenticate, userController.find);

router
  .route('/:id')
  .get(authenticate, userController.findOne)
  .put(authenticate, validate(schemas.user.update), userController.update)
  .delete(authenticate, userController.delete);

export default router;

================================================================================
Arquivo: ./src/routes/sessionRoutes.js
================================================================================

// src/routes/sessionRoutes.js
import { Router } from 'express';
import { SessionController } from '../controllers/sessionController.js';
import { authenticate } from '../middlewares/auth.js';
import { validate, schemas } from '../middlewares/validate.js';

const router = Router();
const sessionController = new SessionController();

router
  .route('/')
  .post(authenticate, validate(schemas.session.create), sessionController.create)
  .get(authenticate, sessionController.find);

router.get('/user/:userId', authenticate, sessionController.findByUser);

router.delete('/:id', authenticate, sessionController.delete);

export default router;

================================================================================
Arquivo: ./src/routes/messageRoutes.js
================================================================================

// src/routes/messageRoutes.js
import { Router } from 'express';
import { MessageController } from '../controllers/messageController.js';
import { authenticate } from '../middlewares/auth.js';
import { validate, schemas } from '../middlewares/validate.js';

const router = Router();
const messageController = new MessageController();

router
  .route('/')
  .post(authenticate, validate(schemas.message.create), messageController.create);

router.get('/session/:sessionId', authenticate, messageController.findBySession);

router
  .route('/:id')
  .put(authenticate, messageController.update)
  .delete(authenticate, messageController.delete);

export default router;

================================================================================
Arquivo: ./src/routes/vendorRoutes.js
================================================================================

// src/routes/vendorRoutes.js
import { Router } from 'express';
import { VendorController } from '../controllers/vendorController.js';
import { authenticate } from '../middlewares/auth.js';
import { validate, schemas } from '../middlewares/validate.js';

const router = Router();
const vendorController = new VendorController();

router
  .route('/')
  .post(authenticate, validate(schemas.vendor.create), vendorController.create)
  .get(authenticate, vendorController.findAll);

router
  .route('/:id')
  .get(authenticate, vendorController.findOne)
  .put(authenticate, vendorController.update)
  .delete(authenticate, vendorController.delete);

export default router;

================================================================================
Arquivo: ./src/routes/sellerRoutes.js
================================================================================

// src/routes/sellerRoutes.js
import { Router } from 'express';
import { SellerController } from '../controllers/sellerController.js';
import { authenticate } from '../middlewares/auth.js';
import { validate, schemas } from '../middlewares/validate.js';

const router = Router();
const sellerController = new SellerController();

router
  .route('/')
  .post(authenticate, validate(schemas.seller.create), sellerController.create)
  .get(authenticate, sellerController.findAll);

router
  .route('/:id')
  .get(authenticate, sellerController.findOne)
  .put(authenticate, sellerController.update)
  .delete(authenticate, sellerController.delete);

export default router;

================================================================================
Arquivo: ./src/utils/hashPassword.js
================================================================================



================================================================================
Arquivo: ./src/utils/generateToken.js
================================================================================



================================================================================
Arquivo: ./src/utils/validators.js
================================================================================



================================================================================
Arquivo: ./src/utils/AppError.js
================================================================================

// src/utils/AppError.js
export class AppError {
  constructor(message, statusCode = 400) {
    this.message = message;
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'error' : 'fail';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

================================================================================
Arquivo: ./src/services/userService.js
================================================================================

// src/services/userService.js
import { PrismaClient } from '@prisma/client';
import { hash } from 'bcrypt';
import { AppError } from '../utils/AppError.js';

export class UserService {
  constructor() {
    this.prisma = new PrismaClient();
  }

  /**
   * Cria um novo usu√°rio no banco de dados.
   * @param {Object} userData - Dados do usu√°rio.
   * @returns {Object} - Usu√°rio criado.
   */
  async create(userData) {
    const { username, email, password, phoneNumber } = userData;

    console.log('Validating user data...');
    // Verificar se o usu√°rio j√° existe com o mesmo email, username ou telefone
    const userExists = await this.prisma.user.findFirst({
      where: {
        OR: [
          { email },
          { username },
          { phoneNumber }
        ]
      }
    });

    if (userExists) {
      console.error('User already exists:', userExists);
      throw new AppError('User already exists', 400);
    }

    console.log('Hashing password...');
    // Criptografar a senha
    const hashedPassword = await hash(password, 10);

    console.log('Creating user in the database...');
    // Criar o usu√°rio
    const user = await this.prisma.user.create({
      data: {
        username,
        email,
        password: hashedPassword,
        phoneNumber
      },
      select: {
        id: true,
        username: true,
        email: true,
        phoneNumber: true,
        createdAt: true
      }
    });

    console.log('User created successfully:', user);
    return user;
  }

  /**
   * Retorna todos os usu√°rios.
   * @returns {Array} - Lista de usu√°rios.
   */
  async findAll() {
    console.log('Fetching all users...');
    return this.prisma.user.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        phoneNumber: true,
        createdAt: true
      }
    });
  }

  /**
   * Busca um usu√°rio por ID.
   * @param {number} id - ID do usu√°rio.
   * @returns {Object} - Dados do usu√°rio.
   */
  async findById(id) {
    console.log(`Fetching user with ID: ${id}`);
    const user = await this.prisma.user.findUnique({
      where: { id: Number(id) },
      select: {
        id: true,
        username: true,
        email: true,
        phoneNumber: true,
        createdAt: true
      }
    });

    if (!user) {
      console.error('User not found:', id);
      throw new AppError('User not found', 404);
    }

    return user;
  }

  /**
   * Atualiza os dados de um usu√°rio.
   * @param {number} id - ID do usu√°rio.
   * @param {Object} userData - Novos dados do usu√°rio.
   * @returns {Object} - Usu√°rio atualizado.
   */
  async update(id, userData) {
    console.log(`Updating user with ID: ${id}`);
    await this.findById(id); // Garante que o usu√°rio existe

    const updatedUser = await this.prisma.user.update({
      where: { id: Number(id) },
      data: userData,
      select: {
        id: true,
        username: true,
        email: true,
        phoneNumber: true,
        createdAt: true
      }
    });

    console.log('User updated successfully:', updatedUser);
    return updatedUser;
  }

  /**
   * Exclui um usu√°rio.
   * @param {number} id - ID do usu√°rio.
   */
  async delete(id) {
    console.log(`Deleting user with ID: ${id}`);
    await this.findById(id); // Garante que o usu√°rio existe

    await this.prisma.user.delete({
      where: { id: Number(id) }
    });

    console.log('User deleted successfully.');
  }
}


================================================================================
Arquivo: ./src/services/sessionService.js
================================================================================

// src/services/sessionService.js
import { PrismaClient } from '@prisma/client';
import { v4 as uuidv4 } from 'uuid';
import { AppError } from '../utils/AppError.js';

export class SessionService {
  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(userId) {
    const userExists = await this.prisma.user.findUnique({
      where: { id: Number(userId) }
    });

    if (!userExists) {
      throw new AppError('User not found', 404);
    }

    const session = await this.prisma.session.create({
      data: {
        sessionId: uuidv4(),
        userId: Number(userId)
      },
      include: {
        user: {
          select: {
            username: true,
            email: true
          }
        }
      }
    });

    return session;
  }

  async findAll() {
    return this.prisma.session.findMany({
      include: {
        user: {
          select: {
            username: true,
            email: true
          }
        },
        messages: true,
        vendors: true,
        seller: true
      }
    });
  }

  async findByUser(userId) {
    const sessions = await this.prisma.session.findMany({
      where: { userId: Number(userId) },
      include: {
        messages: true,
        vendors: true,
        seller: true
      }
    });

    return sessions;
  }

  async delete(id) {
    const session = await this.prisma.session.findUnique({
      where: { id: Number(id) }
    });

    if (!session) {
      throw new AppError('Session not found', 404);
    }

    await this.prisma.session.delete({
      where: { id: Number(id) }
    });
  }
}

================================================================================
Arquivo: ./src/services/messageService.js
================================================================================

// src/services/messageService.js
import { PrismaClient } from '@prisma/client';
import { AppError } from '../utils/AppError.js';

export class MessageService {
  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(messageData) {
    const { sessionId, sender, content, mediaUrl, phoneNumber } = messageData;

    const sessionExists = await this.prisma.session.findUnique({
      where: { sessionId }
    });

    if (!sessionExists) {
      throw new AppError('Session not found', 404);
    }

    const message = await this.prisma.message.create({
      data: {
        sessionId,
        sender,
        content,
        mediaUrl,
        phoneNumber
      }
    });

    return message;
  }

  async findBySession(sessionId) {
    const messages = await this.prisma.message.findMany({
      where: { sessionId },
      orderBy: { createdAt: 'asc' },
      include: {
        session: {
          select: {
            user: {
              select: {
                username: true
              }
            }
          }
        }
      }
    });

    return messages;
  }

  async update(id, messageData) {
    const { content, mediaUrl } = messageData;

    const message = await this.prisma.message.findUnique({
      where: { id: Number(id) }
    });

    if (!message) {
      throw new AppError('Message not found', 404);
    }

    const updatedMessage = await this.prisma.message.update({
      where: { id: Number(id) },
      data: {
        content,
        mediaUrl
      }
    });

    return updatedMessage;
  }

  async delete(id) {
    const message = await this.prisma.message.findUnique({
      where: { id: Number(id) }
    });

    if (!message) {
      throw new AppError('Message not found', 404);
    }

    await this.prisma.message.delete({
      where: { id: Number(id) }
    });
  }
}

================================================================================
Arquivo: ./src/services/vendorService.js
================================================================================

// src/services/vendorService.js
import { PrismaClient } from '@prisma/client';
import { AppError } from '../utils/AppError.js';

export class VendorService {
  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(vendorData) {
    const { sessionId, phoneNumber, vendorName } = vendorData;

    const sessionExists = await this.prisma.session.findUnique({
      where: { sessionId }
    });

    if (!sessionExists) {
      throw new AppError('Session not found', 404);
    }

    // Verificar se j√° existe um vendor com esse sessionId
    const existingVendor = await this.prisma.vendor.findUnique({
      where: { sessionId }
    });

    if (existingVendor) {
      throw new AppError('Vendor already exists for this session', 400);
    }

    const vendor = await this.prisma.vendor.create({
      data: {
        sessionId,
        phoneNumber,
        vendorName
      }
    });

    return vendor;
  }

  async findAll() {
    const vendors = await this.prisma.vendor.findMany({
      include: {
        session: {
          select: {
            user: {
              select: {
                username: true
              }
            }
          }
        }
      }
    });

    return vendors;
  }

  async findById(id) {
    const vendor = await this.prisma.vendor.findUnique({
      where: { id: Number(id) },
      include: {
        session: {
          select: {
            user: {
              select: {
                username: true
              }
            }
          }
        }
      }
    });

    if (!vendor) {
      throw new AppError('Vendor not found', 404);
    }

    return vendor;
  }

  async update(id, vendorData) {
    const { phoneNumber, vendorName } = vendorData;

    const vendor = await this.findById(id);

    const updatedVendor = await this.prisma.vendor.update({
      where: { id: Number(id) },
      data: {
        phoneNumber,
        vendorName
      }
    });

    return updatedVendor;
  }

  async delete(id) {
    const vendor = await this.findById(id);

    await this.prisma.vendor.delete({
      where: { id: Number(id) }
    });
  }
}

================================================================================
Arquivo: ./src/services/sellerService.js
================================================================================

// src/services/sellerService.js
import { PrismaClient } from '@prisma/client';
import { AppError } from '../utils/AppError.js';

export class SellerService {
  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(sellerData) {
    const { sessionId, sellerName, product, description, image, benefits } = sellerData;

    const sessionExists = await this.prisma.session.findUnique({
      where: { sessionId }
    });

    if (!sessionExists) {
      throw new AppError('Session not found', 404);
    }

    // Verificar se j√° existe um vendedor com mesmo nome na sess√£o
    const existingSeller = await this.prisma.seller.findFirst({
      where: {
        AND: [
          { sessionId },
          { sellerName }
        ]
      }
    });

    if (existingSeller) {
      throw new AppError('Seller already exists in this session', 400);
    }

    const seller = await this.prisma.seller.create({
      data: {
        sessionId,
        sellerName,
        product,
        description,
        image,
        benefits
      }
    });

    return seller;
  }

  async findAll(sessionId) {
    const where = sessionId ? { sessionId } : {};

    const sellers = await this.prisma.seller.findMany({
      where,
      include: {
        session: {
          select: {
            user: {
              select: {
                username: true
              }
            }
          }
        }
      }
    });

    return sellers;
  }

  async findById(id) {
    const seller = await this.prisma.seller.findUnique({
      where: { id: Number(id) },
      include: {
        session: {
          select: {
            user: {
              select: {
                username: true
              }
            }
          }
        }
      }
    });

    if (!seller) {
      throw new AppError('Seller not found', 404);
    }

    return seller;
  }

  async update(id, sellerData) {
    const { product, description, image, benefits } = sellerData;

    const seller = await this.findById(id);

    const updatedSeller = await this.prisma.seller.update({
      where: { id: Number(id) },
      data: {
        product,
        description,
        image,
        benefits
      }
    });

    return updatedSeller;
  }

  async delete(id) {
    const seller = await this.findById(id);

    await this.prisma.seller.delete({
      where: { id: Number(id) }
    });
  }
}



SCHEMAS PRISMA
================================================================================
Diret√≥rio base: ./prisma
================================================================================

================================================================================
Arquivo: ./prisma/schema.prisma
================================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  phoneNumber String    @unique
  createdAt   DateTime  @default(now())
  sessions    Session[]
}

model Session {
  id        Int       @id @default(autoincrement())
  sessionId String    @unique
  userId    Int
  createdAt DateTime  @default(now())
  messages  Message[]
  seller    Seller[]
  user      User      @relation(fields: [userId], references: [id])
  vendors   Vendor[]
}

model Message {
  id          Int      @id @default(autoincrement())
  sessionId   String
  sender      String
  content     String
  mediaUrl    String?
  createdAt   DateTime @default(now())
  phoneNumber String
  session     Session  @relation(fields: [sessionId], references: [sessionId])
}

model Vendor {
  id          Int      @id @default(autoincrement())
  sessionId   String   @unique
  phoneNumber String
  vendorName  String
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [sessionId])
}

model Seller {
  id          Int      @id @default(autoincrement())
  sessionId   String
  sellerName  String
  product     String
  description String
  image       String?
  benefits    String
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [sessionId])

  @@unique([sessionId, sellerName])
}

