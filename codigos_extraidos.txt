ARQUIVOS JAVASCRIPT
================================================================================
Diretório base: ./src
========================================

================================================================================
Arquivo: ./src/server.js
================================================================================

// src/server.js
import 'express-async-errors';
import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import helmet from 'helmet';
import compression from 'compression';
import { config } from 'dotenv';
import { PrismaClient } from '@prisma/client';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Rotas
import userRoutes from './routes/userRoutes.mjs';
import sessionRoutes from './routes/sessionRoutes.mjs';
import messageRoutes from './routes/messageRoutes.mjs';
import vendorRoutes from './routes/vendorRoutes.mjs';
import sellerRoutes from './routes/sellerRoutes.mjs';
import authRoutes from './routes/authRoutes.mjs';
// Middlewares
import { errorHandler, notFound, handleUncaughtExceptions } from './middlewares/error.mjs';
import { limiter } from './middlewares/rateLimit.mjs';

// Configurações
config(); // Carrega variáveis de ambiente
const prisma = new PrismaClient();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Tratamento de exceções não capturadas
handleUncaughtExceptions();

class App {
  constructor() {
    this.app = express();
    this.isDevelopment = process.env.NODE_ENV === 'development';

    this.middlewares();
    this.routes();
    this.errorHandling();
    this.database();
  }

  middlewares() {
    // Configuração para proxies (necessária para express-rate-limit)
    this.app.set('trust proxy', 1);

    // Segurança
    this.app.use(helmet()); // Segurança com headers HTTP
    this.app.use(cors({
      origin: process.env.CORS_ORIGIN || '*',
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));
    this.app.use(limiter); // Rate limiting

    // Body parsing
    this.app.use(express.json({ limit: '10kb' })); // Limita tamanho do body
    this.app.use(express.urlencoded({ extended: true, limit: '10kb' }));

    // Compressão de resposta
    this.app.use(compression());

    // Logging
    if (this.isDevelopment) {
      this.app.use(morgan('dev'));
    } else {
      this.app.use(morgan('combined'));
    }

    // Servir arquivos estáticos (se necessário)
    this.app.use('/public', express.static(join(__dirname, '../public')));

    // Timestamp da requisição
    this.app.use((req, res, next) => {
      req.requestTime = new Date().toISOString();
      next();
    });
  }

  routes() {
    // Health check
    this.app.get('/api/v1/health', (req, res) => {
      res.status(200).json({
        status: 'success',
        message: 'Server is running',
        timestamp: req.requestTime,
        environment: process.env.NODE_ENV
      });
    });

    // API routes
    this.app.use('/api/v1/users', userRoutes);
    this.app.use('/api/v1/auth', authRoutes);
    this.app.use('/api/v1/sessions', sessionRoutes);
    this.app.use('/api/v1/messages', messageRoutes);
    this.app.use('/api/v1/vendors', vendorRoutes);
    this.app.use('/api/v1/sellers', sellerRoutes);

    // Handle undefined routes
    this.app.use(notFound);
  }

  errorHandling() {
    // Middleware global de tratamento de erros
    this.app.use(errorHandler);
  }

  async database() {
    try {
      await prisma.$connect();
      console.log('📦 Database connected successfully');
    } catch (error) {
      console.error('❌ Database connection error:', error);
      process.exit(1);
    }
  }

  getApp() {
    return this.app;
  }
}

// Instância do servidor
const app = new App().getApp();

// Inicialização do servidor
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`
🚀 Server running in ${process.env.NODE_ENV} mode on port ${PORT}
⭐️ API URL: http://localhost:${PORT}/api/v1
📝 API Docs: http://localhost:${PORT}/api-docs
  `);
});

// Tratamento de erros não capturados
process.on('unhandledRejection', (err) => {
  console.error('UNHANDLED REJECTION! 💥 Shutting down...');
  console.error(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('👋 SIGTERM RECEIVED. Shutting down gracefully');
  server.close(async () => {
    await prisma.$disconnect();
    console.log('💥 Process terminated!');
    process.exit(0);
  });
});

export default app;


================================================================================
Arquivo: ./src/config/database.js
================================================================================



================================================================================
Arquivo: ./src/config/env.js
================================================================================

// src/config/env.js
import { config } from 'dotenv';

config();

export default {
  // App
  PORT: process.env.PORT || 3000,
  NODE_ENV: process.env.NODE_ENV || 'development',
  API_VERSION: process.env.API_VERSION || 'v1',
  
  // Database
  DATABASE_URL: process.env.DATABASE_URL,
  
  // JWT
  JWT_SECRET: process.env.JWT_SECRET,
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '24h',
  
  // Cors
  CORS_ORIGIN: process.env.CORS_ORIGIN || '*',
  
  // Rate Limiting
  RATE_LIMIT_WINDOW: process.env.RATE_LIMIT_WINDOW || 15 * 60 * 1000, // 15 minutes
  RATE_LIMIT_MAX: process.env.RATE_LIMIT_MAX || 100,
  
  // Security
  BCRYPT_ROUNDS: process.env.BCRYPT_ROUNDS || 10,
  
  // Logging
  LOG_LEVEL: process.env.LOG_LEVEL || 'debug',
  
  // Cache
  CACHE_TTL: process.env.CACHE_TTL || 60 * 60, // 1 hour
};

================================================================================
Arquivo: ./src/controllers/userController.mjs
================================================================================

// src/controllers/userController.mjs
import UserService from '../services/userService.mjs';
import AppError from '../utils/AppError.mjs';

class UserController {
  constructor() {
    this.userService = new UserService();
    // Bind all methods to preserve 'this' context
    this.create = this.create.bind(this);
    this.find = this.find.bind(this);
    this.findOne = this.findOne.bind(this);
    this.update = this.update.bind(this);
    this.delete = this.delete.bind(this);
  }

  async create(req, res, next) {
    try {
      const user = await this.userService.create(req.body);
      return res.status(201).json({
        status: 'success',
        message: 'User created successfully',
        data: user,
      });
    } catch (err) {
      next(err);
    }
  }

  async find(req, res, next) {
    try {
      const users = await this.userService.findAll();
      return res.status(200).json({
        status: 'success',
        data: users,
      });
    } catch (err) {
      next(err);
    }
  }

  async findOne(req, res, next) {
    try {
      const { id } = req.params;
      const user = await this.userService.findById(id);
      return res.status(200).json({
        status: 'success',
        data: user,
      });
    } catch (err) {
      next(err);
    }
  }

  async update(req, res, next) {
    try {
      const { id } = req.params;
      const updatedUser = await this.userService.update(id, req.body);
      return res.status(200).json({
        status: 'success',
        message: 'User updated successfully',
        data: updatedUser,
      });
    } catch (err) {
      next(err);
    }
  }

  async delete(req, res, next) {
    try {
      const { id } = req.params;
      await this.userService.delete(id);
      return res.status(204).send();
    } catch (err) {
      next(err);
    }
  }
}

export default UserController;

================================================================================
Arquivo: ./src/middlewares/auth.mjs
================================================================================

import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';
import AppError from '../utils/AppError.mjs';

const prisma = new PrismaClient();

export const authenticate = async (req, res, next) => {
    try {
        // 1. Pegar o token
        let token;
        if (req.headers.authorization?.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
        }

        if (!token) {
            throw new AppError('Not authenticated. Please log in.', 401);
        }

        // 2. Verificar o token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // 3. Verificar se o usuário ainda existe
        const user = await prisma.user.findUnique({
            where: { id: decoded.id },
            select: {
                id: true,
                email: true,
                username: true,
                phoneNumber: true
            }
        });

        if (!user) {
            throw new AppError('User no longer exists.', 401);
        }

        // 4. Colocar o usuário na request
        req.user = user;
        next();
    } catch (error) {
        if (error.name === 'JsonWebTokenError') {
            throw new AppError('Invalid token. Please log in again.', 401);
        }
        if (error.name === 'TokenExpiredError') {
            throw new AppError('Your token has expired. Please log in again.', 401);
        }
        throw error;
    }
};

export const restrictTo = (...roles) => {
    return (req, res, next) => {
        if (!roles.includes(req.user.role)) {
            throw new AppError('You do not have permission to perform this action', 403);
        }
        next();
    };
};

================================================================================
Arquivo: ./src/middlewares/error.mjs
================================================================================

import AppError from '../utils/AppError.mjs';

export const errorHandler = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'development') {
        return res.status(err.statusCode).json({
            status: err.status,
            error: err,
            message: err.message,
            stack: err.stack
        });
    }

    // Erro operacional, erro confiável: enviar mensagem para o cliente
    if (err.isOperational) {
        return res.status(err.statusCode).json({
            status: err.status,
            message: err.message
        });
    }

    // Erro de programação ou outro erro não confiável: não vazar detalhes do erro
    console.error('ERROR 💥', err);
    return res.status(500).json({
        status: 'error',
        message: 'Something went wrong!'
    });
};

// Middleware para lidar com erros assíncronos
export const catchAsync = (fn) => {
    return (req, res, next) => {
        fn(req, res, next).catch(next);
    };
};

// Middleware para rotas não encontradas
export const notFound = (req, res, next) => {
    const err = new AppError(`Can't find ${req.originalUrl} on this server!`, 404);
    next(err);
};

// Handler para erros não tratados (rejeições não tratadas de promessas)
export const handleUncaughtExceptions = () => {
    process.on('uncaughtException', (err) => {
        console.error('UNCAUGHT EXCEPTION! 💥 Shutting down...');
        console.error(err.name, err.message);
        process.exit(1);
    });

    process.on('unhandledRejection', (err) => {
        console.error('UNHANDLED REJECTION! 💥 Shutting down...');
        console.error(err.name, err.message);
        process.exit(1);
    });
};

================================================================================
Arquivo: ./src/middlewares/validate.mjs
================================================================================


// src/middlewares/validate.mjs
import { object, string } from 'yup';
import AppError from '../utils/AppError.mjs';

const auth = {
  login: object({
    body: object({
      email: string().email().required().label('Email'),
      password: string().required().min(6).label('Password')
    })
  })
};

const user = {
  create: object({
    body: object({
      username: string().required().min(3),
      email: string().email().required(),
      password: string().required().min(6),
      phoneNumber: string().required().min(10)
    })
  }),
  update: object({
    body: object({
      username: string().min(3),
      email: string().email(),
      phoneNumber: string().min(10)
    })
  })
};

const session = {
    create: object({
        body: object({
            userId: string().required(),
            title: string().min(3).max(100).optional()
        })
    }),
    update: object({
        body: object({
            title: string().min(3).max(100).required()
        })
    })
};

const message = {
  create: object({
    body: object({
      sessionId: string().required(),
      sender: string().required(),
      content: string().required(),
      phoneNumber: string().required(),
      mediaUrl: string().url().nullable()
    })
  })
};

const vendor = {
  create: object({
    body: object({
      sessionId: string().required(),
      phoneNumber: string().required(),
      vendorName: string().required()
    })
  })
};

const seller = {
  create: object({
    body: object({
      sessionId: string().required(),
      sellerName: string().required(),
      product: string().required(),
      description: string().required(),
      benefits: string().required(),
      image: string().url().nullable()
    })
  })
};

const schemas = {
  auth,
  user,
  session,
  message,
  vendor,
  seller
};

const validate = (schema) => async (req, res, next) => {
  try {
    await schema.validate({
      body: req.body,
      query: req.query,
      params: req.params,
    });
    next();
  } catch (err) {
    throw new AppError(err.message, 400);
  }
};

export { validate, schemas };

================================================================================
Arquivo: ./src/middlewares/rateLimit.mjs
================================================================================

import rateLimit from 'express-rate-limit';
import AppError from '../utils/AppError.mjs';

export const limiter = rateLimit({
    max: 100, // limite de 100 requisições
    windowMs: 60 * 60 * 1000, // 1 hora
    message: 'Too many requests from this IP, please try again in an hour!',
    handler: (req, res) => {
        throw new AppError('Too many requests from this IP, please try again in an hour!', 429);
    }
});

export const authLimiter = rateLimit({
    max: 5, // limite de 5 tentativas
    windowMs: 15 * 60 * 1000, // 15 minutos
    message: 'Too many login attempts from this IP, please try again in 15 minutes!',
    handler: (req, res) => {
        throw new AppError('Too many login attempts from this IP, please try again in 15 minutes!', 429);
    }
});

================================================================================
Arquivo: ./src/routes/userRoutes.mjs
================================================================================

// src/routes/userRoutes.mjs

import { Router } from 'express';
import UserController from '../controllers/userController.mjs';
import { authenticate } from '../middlewares/auth.mjs';
import { authLimiter } from '../middlewares/rateLimit.mjs';

const router = Router();
const userController = new UserController();

// Rota para criar e listar usuários
router
  .route('/')
  .post(
    authLimiter, // Limita tentativas de requisições (proteção contra brute force)
    userController.create // Chama o método de criação no controlador
  )
  .get(
    authenticate, // Requer autenticação
    userController.find // Chama o método de busca de todos os usuários
  );

// Rota para operações específicas por ID de usuário
router
  .route('/:id')
  .get(
    authenticate, // Requer autenticação
    userController.findOne // Chama o método para buscar um usuário específico
  )
  .put(
    authenticate, // Requer autenticação
    userController.update // Chama o método de atualização no controlador
  )
  .delete(
    authenticate, // Requer autenticação
    userController.delete // Chama o método de exclusão no controlador
  );

export default router;


================================================================================
Arquivo: ./src/utils/hashPassword.mjs
================================================================================

// utils/hashPassword.mjs
import bcrypt from 'bcrypt';
import { config } from 'dotenv';
config();

const saltRounds = parseInt(process.env.BCRYPT_ROUNDS);

export const hashPassword = async (password) => {
  return bcrypt.hash(password, saltRounds);
};

export const comparePasswords = async (candidatePassword, hashedPassword) => {
  return bcrypt.compare(candidatePassword, hashedPassword);
};

================================================================================
Arquivo: ./src/utils/validators.js
================================================================================



================================================================================
Arquivo: ./src/utils/AppError.mjs
================================================================================

// src/utils/AppError.mjs
class AppError {
  constructor(message, statusCode = 400, errors = []) {
    this.message = message;
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'error' : 'fail';
    this.isOperational = true;
    this.errors = errors; // Inclui detalhes dos erros

    Error.captureStackTrace(this, this.constructor);
  }
}
export default AppError;

================================================================================
Arquivo: ./src/utils/generateToken.mjs
================================================================================

// utils/generateToken.mjs
import jwt from 'jsonwebtoken';
import { config } from 'dotenv';
config();

export const generateToken = (userId) => {
  return jwt.sign(
    { id: userId },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN }
  );
};

================================================================================
Arquivo: ./src/services/userService.mjs
================================================================================

import prisma from '@prisma/client';
import bcrypt from 'bcrypt';
import AppError from '../utils/AppError.mjs';

c

class UserService {
    constructor() {
        this.prisma = new PrismaClient();
    }

    async create(userData) {
        const { username, email, password, phoneNumber } = userData;

        console.log('Validating user data...');
        const userExists = await this.prisma.user.findFirst({
            where: {
                OR: [
                    { email },
                    { username },
                    { phoneNumber }
                ]
            }
        });

        if (userExists) {
            console.error('User already exists:', userExists);
            throw new AppError('User already exists', 400);
        }

        console.log('Hashing password...');
        const hashedPassword = await bcrypt.hash(password, 10);

        console.log('Creating user in the database...');
        const user = await this.prisma.user.create({
            data: {
                username,
                email,
                password: hashedPassword,
                phoneNumber
            },
            select: {
                id: true,
                username: true,
                email: true,
                phoneNumber: true,
                createdAt: true
            }
        });

        console.log('User created successfully:', user);
        return user;
    }

    async findAll() {
        console.log('Fetching all users...');
        return this.prisma.user.findMany({
            select: {
                id: true,
                username: true,
                email: true,
                phoneNumber: true,
                createdAt: true
            }
        });
    }

    async findById(id) {
        console.log(`Fetching user with ID: ${id}`);
        const user = await this.prisma.user.findUnique({
            where: { id: Number(id) },
            select: {
                id: true,
                username: true,
                email: true,
                phoneNumber: true,
                createdAt: true
            }
        });

        if (!user) {
            console.error('User not found:', id);
            throw new AppError('User not found', 404);
        }

        return user;
    }

    async update(id, userData) {
        console.log(`Updating user with ID: ${id}`);
        await this.findById(id);

        const updatedUser = await this.prisma.user.update({
            where: { id: Number(id) },
            data: userData,
            select: {
                id: true,
                username: true,
                email: true,
                phoneNumber: true,
                createdAt: true
            }
        });

        console.log('User updated successfully:', updatedUser);
        return updatedUser;
    }

    async delete(id) {
        console.log(`Deleting user with ID: ${id}`);
        await this.findById(id);

        await this.prisma.user.delete({
            where: { id: Number(id) }
        });

        console.log('User deleted successfully.');
    }
}

export default UserService;



SCHEMAS PRISMA
================================================================================
Diretório base: ./prisma
================================================================================

================================================================================
Arquivo: ./prisma/schema.prisma
================================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  phoneNumber String    @unique
  createdAt   DateTime  @default(now())
  sessions    Session[]
  loginSessions LoginSession[]
}

model LoginSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  userAgent String
  ipAddress String
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Session {
  id        Int       @id @default(autoincrement())
  sessionId String    @unique
  title     String?
  type      String?   @default("regular")
  status    String?   @default("active")
  userId    Int
  createdAt DateTime  @default(now())
  messages  Message[]
  seller    Seller[]
  user      User      @relation(fields: [userId], references: [id])
  vendors   Vendor[]
}


model Message {
  id          Int      @id @default(autoincrement())
  sessionId   String
  sender      String
  content     String
  mediaUrl    String?
  createdAt   DateTime @default(now())
  phoneNumber String
  session     Session  @relation(fields: [sessionId], references: [sessionId])
}

model Vendor {
  id          Int      @id @default(autoincrement())
  sessionId   String   @unique
  phoneNumber String
  vendorName  String
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [sessionId])
}

model Seller {
  id          Int      @id @default(autoincrement())
  sessionId   String
  sellerName  String
  product     String
  description String
  image       String?
  benefits    String
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [sessionId])

  @@unique([sessionId, sellerName])
}

